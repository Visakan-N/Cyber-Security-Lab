#include <iostream>
#include <cmath>

using namespace std;

// Function to calculate (base^exp) % mod
int power(int base, int exp, int mod) {
    int result = 1;
    base = base % mod;
    while (exp > 0) {
        if (exp % 2 == 1)
            result = (result * base) % mod;
        exp = exp >> 1;
        base = (base * base) % mod;
    }
    return result;
}

int main() {
    int p = 23; 
    int g = 5;


    int a = 6;   // Private key for Alice
    int b = 15;  // Private key for Bob

    // Calculate public keys
    int A = power(g, a, p); 
    int B = power(g, b, p); 

    // Exchange public keys (this step is typically done over a public channel)
    int sharedSecretAlice = power(B, a, p); 
    int sharedSecretBob = power(A, b, p);   

    // Both Alice and Bob will now have the same shared secret
    cout << "Shared secret for Alice: " << sharedSecretAlice << endl;
    cout << "Shared secret for Bob: " << sharedSecretBob << endl;

    return 0;
}
